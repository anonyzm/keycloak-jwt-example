import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { authService } from './authService';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const httpClient: AxiosInstance = axios.create({
  baseURL: 'http://localhost/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
httpClient.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const token = authService.getToken();
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîë Added token to request:', config.url);
    } else {
      console.log('‚ö†Ô∏è No token available for request:', config.url);
    }
    return config;
  },
  (error) => {
    console.error('‚ùå Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ 401 –æ—à–∏–±–æ–∫
httpClient.interceptors.response.use(
  (response: AxiosResponse) => response,
  async (error) => {
    console.log('httpClient interceptor response code: ', error);
    const originalRequest = error.config;

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 –∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      console.log('üîê Received 401 error, attempting to refresh token...');
      console.log('üìù Original request:', {
        url: originalRequest.url,
        method: originalRequest.method,
        headers: originalRequest.headers
      });
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é refresh_token
        const refreshToken = authService.getRefreshToken();
        if (refreshToken) {
          console.log('üîÑ Attempting to refresh token with refresh_token...');
          await authService.refreshToken(refreshToken);
          console.log('‚úÖ Successfully refreshed token, retrying request...');
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç refresh_token, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ç–æ–∫–µ–Ω
          console.log('‚ö†Ô∏è No refresh_token found, falling back to guest token...');
          await authService.forceRefreshGuestToken();
          console.log('‚úÖ Successfully refreshed guest token, retrying request...');
        }
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        const token = authService.getToken();
        if (token && originalRequest.headers) {
          originalRequest.headers.Authorization = `Bearer ${token}`;
          console.log('üîÑ Retrying request with new token...');
          return httpClient.request(originalRequest);
        } else {
          console.error('‚ùå Failed to get token after refresh');
          return Promise.reject(error);
        }
      } catch (refreshError) {
        console.error('‚ùå Failed to refresh token:', refreshError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        authService.clearToken();
        console.log('üßπ Cleared invalid token');
      }
    } else if (error.response?.status === 401 && originalRequest._retry) {
      console.log('‚ö†Ô∏è Request already retried once, not retrying again');
    }
    
    return Promise.reject(error);
  }
);

export default httpClient;
